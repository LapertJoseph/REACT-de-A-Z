Composant JSX et ses Normes.
------------------------------

function App() {            // Ceci est un composant ( une fonction) 
  return (
    <div className="App">                           {/* On écris className au lieu de class car c'est un mot réservé */}
      <h1>Hello app React</h1>
      <p>Lorem ipsum dolor sit amet.</p>
      <input type="text" /> <br />                  {/* pour les inputs il faut les fermer sinon on aura une erreur */}
      {5 + 5} <br />                                {/* on peut directement faire des calcul dans le html */}
      {true ? 1000 : "abc"}                         {/* Rendu conditionel */}
    </div>
  );
}

export default App;       // export de la fonction App qui est retourner dans la div root 

Premier Composant
------------------------------

1) Pour crée un composant on crée un fichier Nom.JSX (première lettre du nom en MAJ)
2) Ensuite on crée le composant (function) dans ce fichier et on l'export

    function Item () {
        return <h1>Hello world depuis item</h1>     // quand il y a une seule ligne de code on peux tout mettre sur une ligne sans les paranthèses
    }
    export default Item;                            // ne pas oublier de l'exporter sinon on aura une erreur et il ne s'affichera pas

3) ensuite on se rend au point d'entrée de l'app (App.js) 
4) on import le composant en écrivant
    
    import Item from './Item'    (ne pas oublier les majuscules)

5) on le place à l'endroit que l'on veut qu'il s'affiche
6) TRES IMPORTANT on oublie pas de fermer la balise sinon erreur lors de la compilation

Exemple : 
            import Item from './Item'   // importation du composant

            function App() {            // Ceci est un composant ( une fonction) 
            return (
                <div className="App">                           {/* On écris className au lieu de class car c'est un mot réservé */}
                <h1>Hello app React</h1>                        
                <Item />
                </div>
            );
            }

            export default App;       // export de la fonction App qui est retourner dans la div root

2 grandes familles de composants : 

"Composant Stateless" car il ne fournit qu'une présentation (il sert seulement a retourner un h1).
"Composant State" qui vont avoir des données.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Découverte de useState()
----------------------------------------------------------------------------------------------------------------------------------------------
    const [monState, setMonState] = useState(10)          // syntaxe d'une utilisation d'un useState qui retourne un tableau  (State de départ qui est retourner , fonction qui modifie le state)
                                                          // dans la paranthèses de = useState(10) on définis une valeur de départ ici 10
le useState() permet de re render un état il prend deux parametre (une valeur de base, et une fonctione qui modifie cette la valeur de base)

-----------------------------------------------------------------------------------------------------------------------------------------------
Modification de useState()

pour modifier un useState on utilise un addeventListener directement dans le JSX 
par exemple :

- Je place un addeventListener sur le bouton pour que quand je clique il me change l'état de state suivi d'une fontion entre Accolade 
      <div className="App">                           
        <h1>Hello State : {monState}</h1>                       // je place monState dans le h1 pour bien voir le changement d'état
                                                
        <button onClick={modifyState}>Change State</button>     // je place un addeventListener sur le button addeventListener sur le bouton onClick={nomFunction}
      </div>

- ensuite je créer une fonction pour pouvoir intéragir avec le onClick comme un addeventListener normal JSX
  onClick={modifyState}     // modifyState est le nom de fonction créer pour modifier l'état du state 

- on déclare la fonction modifyState plus haut dessus de l'exemple : 

  const modifyState =  () => {                // fonction fléchée nomFunction = () => {}
    setMonState(20)                           // à l'intérieur de la fontion, on utilise le deuxieme parametre de useState (ici setMonState) et on lui passe une valeur
  }

ce qui donne le code suivant 

    function App() {                                                    

      const [monState, setMonState] = useState(10);          

      const modifyState =  () => {                      // fonction qui modifie le state
        setMonState(20)
      }

      return (
        <div className="App">                           
          <h1>Hello State : {monState}</h1>   
                                                  
          <button onClick={modifyState}>Change State</button>     // ajout de l'addeventListener onClick
        </div>
      );
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------
Les props :

Ce sont des propriétés qui sont passé en paramètre du composant 
ex : Item(props), 
et qui vont retourner un objet d'où les paranthèses dans 
<Item number={monState} /> .

 - la valeur de props dépend de ce qu'on lui donne dans App.js donc de son Parent
dans notre exemple props prend un number car number={monState} est déclarer à coté de {monState} est donc la valeur initiale de useState,
mais il peut aussi prendre un texte txt={"Hello world} dans ce cas la valeur de props est un txt qui prend pour valeur "Hello World"

 - Dans les deux cas, l'objet va contenir ce qu'un parent lui donne {number="59", txt="Hello World", ...} {propriétés: valeur} <= objet JSON
 - Plus important encore on peux passer du State du composant a l'enfant : 

  Dans app.js on a utiliser 

    const {monState, setMonState} = useState(10)

  on peut passer le state de app.js dans le second composant Item 

    <Item number={monState} /> 
  
  Ici il va render l'état de monState dans l'enfant Item. (il ne faut pas oublier de repasser dans le composant Item pour modifier le props.number)

 - Cela permet de garder les composants qui vont effectuer des tâches : appel API, Calcul, ect ect  (State = Données)
et les autres composants qui eux vont avoir un rôle d'affichage comme dans notre exemple  <Item number={monState} /> qui affichera le state de son parent (Stateless) SOC = Separation Of Concern 

 - On a vu 2 cas ou on peux voir des mise a jour de composant :
  1) utilisation de useState qui après l'avoir déclarer, on créer un addeventListener et une fonction pour modifier le state (Quand son propre state change)
  2) Lorsqu'on passe des props à App, il va s'opérer aussi un changement d'état et cela met aussi à jour le composant enfant (Item)

Le changement d'état du composant va permettre donc un rerender du nouvel état.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Remonter le State et/ou comment modifier du state d'un composant supérieur avec un composant enfant : 

 - Rappel : 
 - Quand on retourne du JSX, il faut toujours retourner un bloc 
exemple :
  return ( 
        <div>                                                       // on le met dans une div pour le mettre dans un bloc 
        <h1>{props.func}</h1>                                       // on ne peux pas mettre un h1 suivi d'un bouton sans div sinon erreur
        <button onClick={props.func}>Change state</button>
        </div>
      )

Pour modifier le state d'un parent avec celui de l'enfant on passe dans le render du composant enfant une fonction : <Item func={nomFonction}/> 
puis dans le composant enfant, on passe dans l'action du changement d'état (addeventListener) props.func 
qui va faire référence à la fonction définis dans le parent (ici modifyState)

exemple : 
  function Item (props) {                                        // déclaration d'un composant React
    return (                                                     
        <div>
        <h1>{props.func}</h1>                                    // props.func fais référence a la fonction modifyState qui se trouve dans App.js
        <button onClick={props.func}>Change state</button>       // action changement d'état : onClick={props.func}               
        </div>
    )              
  } 

Si l'enfant avait un state ? comment afficher le state d'un enfant dans celui d'un parent ? 

import {useState} from 'react'                                                // import qui permet d'utiliser une méthode React ici useState

function Item (props) {

    const [itemState, setItemState] = useState('Item State !')                // State de l'enfant qui 2 parametres (une par défaut (ici un string Item State!)
                                                                                 et une fonction setItemState)
                         
    return ( 
        <div>
        <h1>{props.func}</h1>                                                  // props.func fais référence a la fonction modifyState
        <button onClick={() => props.func(itemState)}>Change state</button>    // ici on utilise une fonction anonyme pour retourne l'execution de la fonction 
    )              
}
export default Item;

il faut aussi dans la fonction qu'on a déclarer dans le parent mettre en parametre data pour qu'il puisse récupérer les données que l'on passer dans useState

exemple : 
  const modifyState =  (data) => {           // dans la fonction on met en parametre data pour qu'il puisse récupérer le state de l'enfant Item
    // console.log(data);
    setMonState(data)
  }

