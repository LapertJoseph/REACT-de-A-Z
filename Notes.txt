Composant JSX et ses Normes.
------------------------------

function App() {            // Ceci est un composant ( une fonction) 
  return (
    <div className="App">                           {/* On écris className au lieu de class car c'est un mot réservé */}
      <h1>Hello app React</h1>
      <p>Lorem ipsum dolor sit amet.</p>
      <input type="text" /> <br />                  {/* pour les inputs il faut les fermer sinon on aura une erreur */}
      {5 + 5} <br />                                {/* on peut directement faire des calcul dans le html */}
      {true ? 1000 : "abc"}                         {/* Rendu conditionel */}
    </div>
  );
}

export default App;       // export de la fonction App qui est retourner dans la div root 

Premier Composant
------------------------------

1) Pour crée un composant on crée un fichier Nom.JSX (première lettre du nom en MAJ)
2) Ensuite on crée le composant (function) dans ce fichier et on l'export

    function Item () {
        return <h1>Hello world depuis item</h1>     // quand il y a une seule ligne de code on peux tout mettre sur une ligne sans les paranthèses
    }
    export default Item;                            // ne pas oublier de l'exporter sinon on aura une erreur et il ne s'affichera pas

3) ensuite on se rend au point d'entrée de l'app (App.js) 
4) on import le composant en écrivant
    
    import Item from './Item'    (ne pas oublier les majuscules)

5) on le place à l'endroit que l'on veut qu'il s'affiche
6) TRES IMPORTANT on oublie pas de fermer la balise sinon erreur lors de la compilation

Exemple : 
            import Item from './Item'   // importation du composant

            function App() {            // Ceci est un composant ( une fonction) 
            return (
                <div className="App">                           {/* On écris className au lieu de class car c'est un mot réservé */}
                <h1>Hello app React</h1>                        
                <Item />
                </div>
            );
            }

            export default App;       // export de la fonction App qui est retourner dans la div root

2 grandes familles de composants : 

"Composant Stateless" car il ne fournit qu'une présentation (il sert seulement a retourner un h1).
"Composant State" qui vont avoir des données.

Découverte de useState()
----------------------------------------------------------------------------------------------------------------------------------------------
    const [monState, setMonState] = useState(10)          // syntaxe d'une utilisation d'un useState qui retourne un tableau  (State de départ qui est retourner , fonction qui modifie le state)
                                                          // dans la paranthèses de = useState(10) on définis une valeur de départ ici 10
le useState() permet de re render un état il prend deux parametre (une valeur de base, et une fonctione qui modifie cette la valeur de base)

-----------------------------------------------------------------------------------------------------------------------------------------------
Modification de useState()

pour modifier un useState on utilise un addeventListener directement dans le JSX 
par exemple :

- Je place un addeventListener sur le bouton pour que quand je clique il me change l'état de state suivi d'une fontion entre Accolade 
      <div className="App">                           
        <h1>Hello State : {monState}</h1>                       // je place monState dans le h1 pour bien voir le changement d'état
                                                
        <button onClick={modifyState}>Change State</button>     // je place un addeventListener sur le button addeventListener sur le bouton onClick={nomFunction}
      </div>

- ensuite je créer une fonction pour pouvoir intéragir avec le onClick comme un addeventListener normal JSX
  onClick={modifyState}     // modifyState est le nom de fonction créer pour modifier l'état du state 

- on déclare la fonction modifyState plus haut dessus de l'exemple : 

  const modifyState =  () => {                // fonction fléchée nomFunction = () => {}
    setMonState(20)                           // à l'intérieur de la fontion, on utilise le deuxieme parametre de useState (ici setMonState) et on lui passe une valeur
  }

ce qui donne le code suivant 

    function App() {                                                    

      const [monState, setMonState] = useState(10);          

      const modifyState =  () => {                      // fonction qui modifie le state
        setMonState(20)
      }

      return (
        <div className="App">                           
          <h1>Hello State : {monState}</h1>   
                                                  
          <button onClick={modifyState}>Change State</button>     // ajout de l'addeventListener onClick
        </div>
      );
    }
